{"version":3,"sources":["components/Page.js","components/Filter/DateRange.js","pages/BasePage.js","utils/formatDate.js","utils/colors.js","pages/ReceiptTotalPage.js"],"names":["bem","bn","create","Page","_ref","title","breadcrumbs","Tag","tag","className","children","restProps","Object","C_Users_Direcas_Documents_REACT_direcas_team_panel_direcas_cloud_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","classes","b","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","assign","e","_Typography__WEBPACK_IMPORTED_MODULE_6__","type","reactstrap__WEBPACK_IMPORTED_MODULE_4__","reactstrap__WEBPACK_IMPORTED_MODULE_5__","length","map","_ref2","index","name","active","key","defaultProps","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","reactstrap__WEBPACK_IMPORTED_MODULE_1__","reactstrap__WEBPACK_IMPORTED_MODULE_2__","reactstrap__WEBPACK_IMPORTED_MODULE_3__","DateRange","props","md","for","id","placeholder","defaultValue","fromStartDate","onChange","event","target","value","toStartDate","BasePage","isMobile","document","querySelector","classList","toggle","React","Component","formatDate","date","d","Date","month","getMonth","day","getDate","year","getFullYear","join","__webpack_exports__","getColor","availableColor","arguments","undefined","window","getComputedStyle","documentElement","getPropertyValue","concat","ReceiptTotalPage","state","filters","from","to","groupByAffiliate","searchClicked","handleSubmit","_this","setState","onLoadStats","handleFilterChange","handleCheckboxChange","handleReset","keys","forEach","changeGroupBy","_this$state","this","_this$props","stats","error","loading","affiliates","body","react__WEBPACK_IMPORTED_MODULE_6___default","reactstrap__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","reactstrap__WEBPACK_IMPORTED_MODULE_13__","color","ids","statsGrouped","slice","entries","hasOwnProperty","attributes","quantity","mean","amount","promo_amount","promo_perc","promo_amount_leaflet","promo_perc_leaflet","promo_amount_internal","promo_perc_internal","promo_amount_special","promo_perc_special","arr","k","affiliate","quantityTotal","amountTotal","promoAmountTotal","promoLeafletAmountTotal","promoInternalAmountTotal","promoSpecialAmountTotal","means","promos","leafletPromos","internalPromos","specialPromos","chartTotalPromoData","labels","datasets","label","borderColor","backgroundColor","data","chartPromoData","fill","borderWidth","cardHeader","reactstrap__WEBPACK_IMPORTED_MODULE_14__","reactstrap__WEBPACK_IMPORTED_MODULE_15__","reactstrap__WEBPACK_IMPORTED_MODULE_16__","xl","lg","react_chartjs_2__WEBPACK_IMPORTED_MODULE_23__","options","C_Users_Direcas_Documents_REACT_direcas_team_panel_direcas_cloud_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__","LINE_CHART_OPTIONS","display","text","reactstrap__WEBPACK_IMPORTED_MODULE_17__","responsive","row","relationships","push","react_number_format__WEBPACK_IMPORTED_MODULE_30__","displayType","thousandSeparator","decimalSeparator","decimalScale","fixedDecimalScale","renderText","arraySum","toFixed","components_Page__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_18__","onSubmit","_components_Filter_DateRange__WEBPACK_IMPORTED_MODULE_28__","bind","reactstrap__WEBPACK_IMPORTED_MODULE_19__","check","reactstrap__WEBPACK_IMPORTED_MODULE_20__","reactstrap__WEBPACK_IMPORTED_MODULE_21__","checked","reactstrap__WEBPACK_IMPORTED_MODULE_22__","disabled","onClick","react_notification_system_redux__WEBPACK_IMPORTED_MODULE_24___default","dismissible","notifications","style","NOTIFICATION_SYSTEM_STYLE","contextTypes","store","PropTypes","object","propTypes","array","bool","pdfAvaiable","connect","statistics","receiptTotalStatistics","dispatch","page","perPage","include","order","actions"],"mappings":"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","file":"static/js/20.1b376df2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nimport bn from 'utils/bemnames';\n\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\n\nimport Typography from './Typography';\n\nconst bem = bn.create('page');\n\nconst Page = ({\n  title,\n  breadcrumbs,\n  tag: Tag,\n  className,\n  children,\n  ...restProps\n}) => {\n  const classes = bem.b('px-3', className);\n\n  return (\n    <Tag className={classes} {...restProps}>\n      <div className={bem.e('header')}>\n        {title && typeof title === 'string' ? (\n          <Typography type=\"h1\" className={bem.e('title')}>\n            {title}\n          </Typography>\n        ) : (\n            title\n          )}\n        {breadcrumbs && (\n          <Breadcrumb className={bem.e('breadcrumb')}>\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            {breadcrumbs.length &&\n              breadcrumbs.map(({ name, active }, index) => (\n                <BreadcrumbItem key={index} active={active}>\n                  {name}\n                </BreadcrumbItem>\n              ))}\n          </Breadcrumb>\n        )}\n      </div>\n      {children}\n    </Tag>\n  );\n};\n\nPage.propTypes = {\n  tag: PropTypes.component,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  breadcrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      active: PropTypes.bool,\n    })\n  ),\n};\n\nPage.defaultProps = {\n  tag: 'div',\n  title: '',\n};\n\nexport default Page;\n","import React from 'react';\n\nimport { Col, Row, FormGroup, Label, Input } from 'reactstrap';\n\nconst DateRange = (props) => {\n    return (\n        <Row>\n            <Col md={6}>\n                <FormGroup>\n                    <Label for=\"from\">Da</Label>\n                    <Input\n                        type=\"date\"\n                        name=\"from\"\n                        id=\"from\"\n                        placeholder=\"Data inizio\"\n                        defaultValue={props.fromStartDate}\n                        onChange={(event) => props.onChange(event.target.value, 'from')}\n                    />\n                </FormGroup>\n            </Col>\n            <Col md={6}>\n                <FormGroup>\n                    <Label for=\"exampleDate\">A</Label>\n                    <Input\n                        type=\"date\"\n                        name=\"date\"\n                        id=\"to\"\n                        placeholder=\"Data Fine\"\n                        defaultValue={props.toStartDate}\n                        onChange={(event) => props.onChange(event.target.value, 'to')}\n                    />\n                </FormGroup>\n            </Col>\n        </Row>\n    );\n};\n\nexport default DateRange;\n","import React from 'react';\n\nimport { isMobile } from \"react-device-detect\";\n\nclass BasePage extends React.Component {\n\tcomponentDidMount() {\n\t\tif (isMobile) {\n\t\t\tdocument.querySelector('.cr-sidebar').classList.toggle('cr-sidebar--open');\n\t\t}\n\t}\n}\n\nexport default BasePage","export const formatDate = (date) => {\n  var d = new Date(date),\n      month = '' + (d.getMonth() + 1),\n      day = '' + d.getDate(),\n      year = d.getFullYear()\n\n  if (month.length < 2)\n      month = '0' + month;\n  if (day.length < 2)\n      day = '0' + day;\n\n  return [year, month, day].join('-');\n}\n\nexport default formatDate\n","// const availableColors = [\n//   'blue',\n//   'indigo',\n//   'purple',\n//   'pink',\n//   'red',\n//   'orange',\n//   'yellow',\n//   'green',\n//   'teal',\n//   'cyan',\n//   'white',\n//   'gray',\n//   'gray-dark',\n//   'primary',\n//   'secondary',\n//   'success',\n//   'info',\n//   'warning',\n//   'danger',\n//   'light',\n//   'dark',\n// ];\n\nexport const getColor = (availableColor = 'primary') => {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  const color = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(`--${availableColor}`);\n\n  return color;\n};\n\nexport const getThemeColors = () => [\n  'primary',\n  'secondary',\n  'success',\n  'info',\n  'warning',\n  'danger',\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport * as actions from '../store/actions/index';\nimport Page from 'components/Page';\nimport { Card, CardBody, CardHeader, Col, Row, Table, Form, Button, Label, Input, FormGroup, Spinner } from 'reactstrap';\nimport {  Line } from 'react-chartjs-2';\n\nimport NotificationSystem from 'react-notification-system-redux';\nimport { NOTIFICATION_SYSTEM_STYLE, LINE_CHART_OPTIONS } from 'utils/constants';\nimport arraySum from '../utils/arraySum'\nimport formatDate from '../utils/formatDate'\nimport DateRange from '../components/Filter/DateRange'\nimport { getColor } from 'utils/colors';\nimport NumberFormat from 'react-number-format';\n\nimport BasePage from './BasePage';\n\nconst initChartTotalPromoDataset = () => {\n    return [\n        {\n            label: 'Promozioni',\n            borderColor: getColor('secondary'),\n            backgroundColor: getColor('secondary'),\n            data: [],\n        },\n        {\n            label: 'Totali',\n            borderColor: getColor('primary'),\n            backgroundColor: getColor('primary'),\n            data: [],\n        }\n    ]\n}\n\nconst getChartTotalPromoOptions = () => {\n    return {\n        ...LINE_CHART_OPTIONS,\n        title: {\n            display: true,\n            text: 'Incidenza promozioni',\n        }\n    }\n}\n\nconst initChartPromoDataset = () => {\n    return [\n        {\n            label: 'Promozioni',\n            borderColor: getColor('secondary'),\n            backgroundColor: getColor('secondary'),\n            data: [],\n            fill: false,\n            borderWidth: 1,\n        },\n        {\n            label: 'Volantino',\n            borderColor: getColor('primary'),\n            backgroundColor: getColor('primary'),\n            data: [],\n            fill: false,\n            borderWidth: 1,\n        },\n        {\n            label: 'Interne',\n            borderColor: getColor('success'),\n            backgroundColor: getColor('success'),\n            data: [],\n            fill: false,\n            borderWidth: 1,\n        },\n        {\n            label: 'Speciali',\n            borderColor: getColor('info'),\n            backgroundColor: getColor('info'),\n            data: [],\n            fill: false,\n            borderWidth: 1,\n        },\n    ]\n}\n\nconst getChartPromoOptions = () => {\n    return {\n        ...LINE_CHART_OPTIONS,\n        title: {\n            display: true,\n            text: 'Distribuzione promozioni',\n        }\n    }\n}\n\n\nconst date = new Date()\n\nclass ReceiptTotalPage extends BasePage {\n    state = {\n        filters: {\n            from: formatDate(new Date(date.getFullYear(), date.getMonth(), 1)),\n            to: formatDate(new Date()),\n        },\n        groupByAffiliate: true,\n        searchClicked: false,\n    }\n\n    handleSubmit = () => {\n        const { searchClicked } = this.state\n        this.setState({\n            searchClicked: !searchClicked\n        })\n        this.props.onLoadStats(null, null, this.state.filters, ['affiliate'], null)\n    }\n\n    handleFilterChange = (value, name) => {\n        const { filters } = this.state\n        filters[name] = value\n        this.setState({\n            filters\n        })\n    }\n\n    handleCheckboxChange = () => {\n        const { groupByAffiliate } = this.state\n        this.setState({\n            groupByAffiliate: !groupByAffiliate\n        })\n    }\n\n    handleReset = () => {\n        const { filters } = this.state\n        const names = Object.keys(filters)\n        names.forEach(name => {\n            filters[name] = null\n        })\n        this.setState({\n            filters\n        })\n        this.changeGroupBy(\"\")\n    }\n\n    render() {\n        const {\n            groupByAffiliate,\n            searchClicked\n        } = this.state\n        const {\n            stats,\n            error,\n            loading,\n            affiliates\n        } = this.props\n        let body = null\n        if (loading && searchClicked) {\n            body = <Card><CardBody><Spinner color=\"primary\" /></CardBody></Card>\n        }\n        if (loading === false && error === false && stats !== null) {\n            let ids = Object.keys(affiliates)\n            let statsGrouped = stats\n            if (groupByAffiliate === false) {\n                statsGrouped = {}\n                ids = ids.slice(ids.length - 1, ids.length)\n                Object.entries(stats).forEach((value, key) => {\n                    if (!statsGrouped.hasOwnProperty(stats[key].attributes.day)) {\n                        statsGrouped[stats[key].attributes.day] = stats[key]\n                    } else {\n                        statsGrouped[stats[key].attributes.day].attributes.quantity += stats[key].attributes.quantity\n                        statsGrouped[stats[key].attributes.day].attributes.mean =\n                            (statsGrouped[stats[key].attributes.day].attributes.mean + stats[key].attributes.mean) / 2\n                        statsGrouped[stats[key].attributes.day].attributes.amount += stats[key].attributes.amount\n                        statsGrouped[stats[key].attributes.day].attributes.promo_amount += stats[key].attributes.promo_amount\n                        statsGrouped[stats[key].attributes.day].attributes.promo_perc =\n                            (statsGrouped[stats[key].attributes.day].attributes.promo_perc + stats[key].attributes.promo_amount) / 2\n                        statsGrouped[stats[key].attributes.day].attributes.promo_amount_leaflet += stats[key].attributes.promo_amount_leaflet\n                        statsGrouped[stats[key].attributes.day].attributes.promo_perc_leaflet =\n                            (statsGrouped[stats[key].attributes.day].attributes.promo_perc_leaflet + stats[key].attributes.promo_perc_leaflet) / 2\n                        statsGrouped[stats[key].attributes.day].attributes.promo_amount_internal += stats[key].attributes.promo_amount_internal\n                        statsGrouped[stats[key].attributes.day].attributes.promo_perc_internal =\n                            (statsGrouped[stats[key].attributes.day].attributes.promo_perc_internal + stats[key].attributes.promo_perc_internal) / 2\n                        statsGrouped[stats[key].attributes.day].attributes.promo_amount_special = stats[key].attributes.promo_amount_special\n                        statsGrouped[stats[key].attributes.day].attributes.promo_perc_special =\n                            (statsGrouped[stats[key].attributes.day].attributes.promo_perc_special + stats[key].attributes.promo_perc_special) / 2\n                    }\n                })\n                let arr = Object.keys(statsGrouped).map((k) => statsGrouped[k])\n                statsGrouped = arr\n            }\n            body = ids.map(id => {\n                const affiliate = affiliates[id]\n                let quantityTotal = 0\n                let amountTotal = 0\n                let promoAmountTotal = 0\n                let promoLeafletAmountTotal = 0\n                let promoInternalAmountTotal = 0\n                let promoSpecialAmountTotal = 0\n                let means = []\n                let promos = []\n                let leafletPromos = []\n                let internalPromos = []\n                let specialPromos = []\n                let chartTotalPromoData = {\n                    labels: [],\n                    datasets: initChartTotalPromoDataset()\n                }\n                let chartPromoData = {\n                    labels: [],\n                    datasets: initChartPromoDataset()\n                }\n                let cardHeader = null\n                if (groupByAffiliate === true) {\n                    cardHeader = <CardHeader className=\"bg-primary  text-white\">\n                        <div className=\"d-flex justify-content-between align-items-center\">\n                            <span>{affiliate.name}</span>\n                        </div>\n                    </CardHeader>\n                }\n                return <Card className=\"mb-3\" key={id}>\n                    {cardHeader}\n                    <CardBody>\n                        <Row>\n                            <Col xl={6} lg={6} md={6}>\n                                <Line data={chartTotalPromoData} options={getChartTotalPromoOptions()} />\n                            </Col>\n                            <Col xl={6} lg={6} md={6}>\n                                <Line data={chartPromoData} options={getChartPromoOptions()} />\n                            </Col>\n                        </Row>\n\n                        <Table responsive>\n                            <thead>\n                                <tr>\n                                    <th className=\"text-right\">Data</th>\n                                    <th className=\"text-right\">Nr. Scontrini</th>\n                                    <th className=\"text-right\">Medio €</th>\n                                    <th className=\"text-right\">Totale €</th>\n                                    <th className=\"text-right\">Promo €</th>\n                                    <th className=\"text-right\">% Promo</th>\n                                    <th className=\"text-right\">Promo Vol ½</th>\n                                    <th className=\"text-right\">% Promo Vol</th>\n                                    <th className=\"text-right\">Promo Int</th>\n                                    <th className=\"text-right\">% Promo Int</th>\n                                    <th className=\"text-right\">Promo Spec €</th>\n                                    <th className=\"text-right\">% Promo Spec</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    statsGrouped.map((row, index) => {\n                                        if (row.relationships.affiliate.data.id === id || !groupByAffiliate) {\n                                            quantityTotal += row.attributes.quantity\n                                            amountTotal += row.attributes.amount\n                                            means.push(row.attributes.mean)\n                                            promoAmountTotal += row.attributes.promo_amount\n                                            promos.push(row.attributes.promo_perc)\n                                            promoLeafletAmountTotal += row.attributes.promo_amount_leaflet\n                                            leafletPromos.push(row.attributes.promo_perc_leaflet)\n                                            promoInternalAmountTotal += row.attributes.promo_amount_internal\n                                            internalPromos.push(row.attributes.promo_perc_internal)\n                                            promoSpecialAmountTotal += row.attributes.promo_amount_special\n                                            specialPromos.push(row.attributes.promo_perc_special)\n                                            chartTotalPromoData.labels.push(row.attributes.day)\n                                            chartTotalPromoData.datasets[1].data.push(row.attributes.amount)\n                                            chartTotalPromoData.datasets[0].data.push(row.attributes.promo_amount)\n                                            chartPromoData.labels.push(row.attributes.day)\n                                            chartPromoData.datasets[1].data.push(row.attributes.promo_amount_leaflet)\n                                            chartPromoData.datasets[2].data.push(row.attributes.promo_amount_internal)\n                                            chartPromoData.datasets[3].data.push(row.attributes.promo_amount_special)\n                                            chartPromoData.datasets[0].data.push(row.attributes.promo_amount)\n                                            return <tr key={index}>\n                                                <td className=\"text-right\">{row.attributes.day}</td>\n                                                <td className=\"text-right\">{row.attributes.quantity}</td>\n                                                <td className=\"text-right\"><NumberFormat value={row.attributes.mean} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                                <td className=\"text-right\"><NumberFormat value={row.attributes.amount} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                                <td className=\"text-right\"><NumberFormat value={row.attributes.promo_amount} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                                <td className=\"text-right\"><NumberFormat value={row.attributes.promo_perc} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                                <td className=\"text-right\"><NumberFormat value={row.attributes.promo_amount_leaflet} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                                <td className=\"text-right\"><NumberFormat value={row.attributes.promo_perc_leaflet} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                                <td className=\"text-right\"><NumberFormat value={row.attributes.promo_amount_internal} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                                <td className=\"text-right\"><NumberFormat value={row.attributes.promo_perc_internal} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                                <td className=\"text-right\"><NumberFormat value={row.attributes.promo_amount_special} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                                <td className=\"text-right\"><NumberFormat value={row.attributes.promo_perc_special} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                            </tr>\n                                        }\n                                        return null\n                                    })\n                                }\n                            </tbody>\n                            <tfoot>\n                                <tr>\n                                    <th>TOTALI:</th>\n                                    <td className=\"text-right\">{quantityTotal}</td>\n                                    <td className=\"text-right\"><NumberFormat value={arraySum(means)} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                    <td className=\"text-right\"><NumberFormat value={amountTotal} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                    <td className=\"text-right\"><NumberFormat value={promoAmountTotal} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                    <td className=\"text-right\">{(arraySum(promos) / promos.length).toFixed(2)}</td>\n                                    <td className=\"text-right\"><NumberFormat value={promoLeafletAmountTotal} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                    <td className=\"text-right\">{(arraySum(leafletPromos) / leafletPromos.length).toFixed(2)}</td>\n                                    <td className=\"text-right\"><NumberFormat value={promoInternalAmountTotal} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                    <td className=\"text-right\">{(arraySum(internalPromos) / internalPromos.length).toFixed(2)}</td>\n                                    <td className=\"text-right\"><NumberFormat value={promoSpecialAmountTotal} displayType={'text'} thousandSeparator={'.'} decimalSeparator={','} decimalScale={2} fixedDecimalScale={true} renderText={value => <div>{value}</div>} /></td>\n                                    <td className=\"text-right\">{(arraySum(specialPromos) / specialPromos.length).toFixed(2)}</td>\n                                </tr>\n                            </tfoot>\n                        </Table>\n                    </CardBody>\n                </Card>\n            })\n        }\n        return (\n            <Page title=\"Totali scontrini\" breadcrumbs={[{ name: 'totali scontrini', active: true }]}>\n                <Row>\n                    <Col>\n                        <Card className=\"mb-3\">\n                            <CardHeader>\n                                Filtri\n                            </CardHeader>\n                            <CardBody>\n                                <Form onSubmit={this.handleSubmit}>\n                                    <DateRange onChange={this.handleFilterChange.bind(this)} fromStartDate={this.state.filters.from} toStartDate={this.state.filters.to} />\n                                    <Row>\n                                        <Col>\n                                            <FormGroup check>\n                                                <Label check>\n                                                    <Input type=\"checkbox\" checked={groupByAffiliate} onChange={this.handleCheckboxChange.bind()}/> Ragruppa per filiale\n                                                </Label>\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col>\n                                            <Button\n                                                color=\"primary\"\n                                                disabled={this.props.loading && this.state.searchClicked}\n                                                onClick={this.handleSubmit}>\n                                                Cerca\n                                            </Button>&nbsp;\n                                            <Button\n                                                color=\"secondary\"\n                                                disabled={this.props.loading && this.state.searchClicked}\n                                                onClick={this.handleReset}>\n                                                Reset\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                </Form>\n                            </CardBody>\n                        </Card>\n                        {body}\n                    </Col>\n                </Row>\n                <NotificationSystem\n                    dismissible={false}\n                    notifications={this.props.notifications}\n                    style={NOTIFICATION_SYSTEM_STYLE}\n                />\n            </Page>\n        )\n    }\n}\n\nReceiptTotalPage.contextTypes = {\n    store: PropTypes.object\n};\n\nReceiptTotalPage.propTypes = {\n    notifications: PropTypes.array,\n    stats: PropTypes.array,\n    affiliates: PropTypes.object,\n    loading: PropTypes.bool,\n    error: PropTypes.bool,\n    pdfAvaiable: PropTypes.bool,\n};\n\nconst mapStateToProps = state => {\n    return {\n        stats: state.statistics.receiptTotalStatistics,\n        affiliates: state.statistics.affiliates,\n        loading: state.statistics.loading,\n        error: state.statistics.error,\n        pdfAvaiable: state.statistics.pdfAvaiable,\n        notifications: state.notifications,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLoadStats: (page, perPage, filters, include, order) => dispatch(actions.loadReceiptTotalStat(page, perPage, filters, include, order)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReceiptTotalPage);\n"],"sourceRoot":""}